/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define LM3 CAPS
#define RM3 BSLH
#define LM4 NUBS
#define RM4 RALT

#define NAVNUM 1
#define FUN 2

&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

&sk {
    quick-release;
};

/ {
    macros {
        neo_compose: neo_compose {
            label = "ZM_neo_compose";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RM3>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp RM3>
                ;
        };

        // Release RALT, then act like &sl FUN
        sl_fun: sl_fun {
            label = "ZM_sl_fun";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp RALT>
                , <&macro_press &sl FUN>
                , <&macro_pause_for_release>
                , <&macro_release &sl FUN>
                ;
        };
    };

    // Switch to NAVNUM, but if RALT is pressed, switch to FUN instead.
    navnumfun: switch_navnum_fun {
        compatible = "zmk,behavior-mod-morph";
        label = "SWITCH_NAVNUM_FUN";
        #binding-cells = <0>;
        bindings = <&sl NAVNUM>, <&sl_fun>;
        mods = <MOD_RALT>;
    };        

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp EQUAL &kp Q &kp W &kp E &kp R &kp T                                                &kp Y &kp U  &kp I     &kp O   &kp P    &kp MINUS
            &kp BSLH  &kp A &kp S &kp D &kp F &kp G                                                &kp H &kp J  &kp K     &kp L   &kp SEMI &kp LBKT
            &kp GRAVE &kp Z &kp X &kp C &kp V &kp B    &kp LCTRL  &kp LGUI     &kp ESC   &kp TAB   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RBKT
                      &neo_compose &kp LALT &sk LM3    &sk LSHIFT &navnumfun   &kp RET   &kp SPACE &kp BSPC &sk RALT &kp SQT
            >;
        };

        navnum_layer {
            bindings = <
            &none &kp PGUP  &kp BSPC  &kp UP    &kp DEL   &kp PGDN                                           &kp KP_DIVIDE   &kp N7     &kp N8     &kp N9     &kp KP_MINUS &kp KP_LPAR
            &none &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END                                            &kp KP_MULTIPLY &kp N4     &kp N5     &kp N6     &kp KP_PLUS  &kp KP_EQUAL
            &none &kp ESC   &kp TAB   &kp INS   &kp RET   &kp K_UNDO   &trans    &trans      &trans &trans   &kp KP_DOT      &kp N1     &kp N2     &kp N3     &kp KP_COMMA &kp KP_RPAR
                                          &trans    &trans    &trans   &trans    &trans      &trans &kp N0 &trans &sl FUN &trans
            >; 
        };

        fun_layer {
            bindings = <
            &none   &none   &none      &kp C_BRI_DN &kp C_BRI_UP &none                                                     &kp K_CMENU &kp F7  &kp F8  &kp F9  &kp F12 &none
            &none   &none   &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &none                                                     &kp PSCRN   &kp F4  &kp F5  &kp F6  &kp F11 &none
            &none   &none   &rgb_ug RGB_TOG &rgb_ug RGB_BRD &rgb_ug RGB_BRI &none     &trans       &bt BT_CLR       &trans  &trans    &none       &kp F1  &kp F2  &kp F3  &kp F10 &none
                                    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
