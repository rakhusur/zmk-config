/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define LM3 CAPS
#define RM3 BSLH
#define LM4 NUBS
#define RM4 RALT

#define NAVNUM 1
#define FUN 2

&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

/ {
    macros {
        neo_compose: neo_compose {
            label = "ZM_neo_compose";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RM3>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp RM3>
                ;
        };
    };

    // Switch to NAVNUM, but if RALT is pressed, switch to FUN instead.
    navnumfun: switch_navnum_fun {
        compatible = "zmk,behavior-mod-morph";
        label = "SWITCH_NAVNUM_FUN";
        #binding-cells = <0>;
        bindings = <&sl NAVNUM>, <&sl FUN>;
        mods = <MOD_RALT>;
    };        

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // Neoqwertz:
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  à  |  Q  |  W  |  E   |  R   |  T   |                                    |  Y   |  U    |  I    |  O   |   P   |  Ü  |
            // |  á  |  A  |  S  |  D   |  F   |  G   |                                    |  H   |  J    |  K    |  L   |   Ö   |  Ä  |
            // |  â  |  Z  |  X  |  C   |  V   |  B   |   M3  |  GUI |      | ESC  |  TAB  |  N   |  M    |  ,    |  .   |   -   |  ß  |
            //                   | HOME | ALT  | CTRL | SHIFT | L M4 |      | BSPC |       |  RET | R M4  | DEL |
            //
            // QWERTY:
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  =  |  Q  |  W  |  E   |  R   |  T   |                                    |  Y   |  U    |  I    |  O   |   P   |  [  |
            // |  ]  |  A  |  S  |  D   |  F   |  G   |                                    |  H   |  J    |  K    |  L   |   ;   |  '  |
            // |  `  |  Z  |  X  |  C   |  V   |  B   |    \   | GUI |     |  ESC  |  TAB  |  N   |  M    |  ,    |  .   |   /   |  -  |
            //                   | HOME | L ALT | CTRL | SHIFT |     |     | BSPC  | SPACE |  RET | R ALT | DEL |

            bindings = <
            &kp EQUAL &kp Q &kp W &kp E &kp R &kp T                                                &kp Y &kp U  &kp I     &kp O   &kp P    &kp LBKT
            &kp RBKT  &kp A &kp S &kp D &kp F &kp G                                                &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
            &kp GRAVE &kp Z &kp X &kp C &kp V &kp B    &sk LM3    &kp LGUI     &kp ESC   &kp TAB   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp MINUS
                      &neo_compose &kp LALT &kp LCTRL  &sk LSHIFT &navnumfun   &kp BSPC  &kp SPACE &kp RET &sk RALT &kp DEL
            >;

        };

        navnum_layer {
            bindings = <
            &none &none &none    &kp UP   &none     &none                                 &none &none &none &none &none &none
            &none &none &kp LEFT &kp DOWN &kp RIGHT &none                                 &none &none &none &none &none &none
            &none &none &none    &none    &none     &none   &none &none    &none &none    &none &none &none &none &none &none
                                          &none &none &none &none &none    &none &none &none &sl FUN &none
            >; 
        };

        fun_layer {
            bindings = <
            &none &kp J &kp K
            >;
        };
    };
};
